"use strict";(self.webpackChunk_nyx_discord_docs=self.webpackChunk_nyx_discord_docs||[]).push([[3350],{4806:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var s=t(7458),r=t(6436);const i={title:"\ud83d\udcbc Event Manager"},c=void 0,o={id:"features/events/event-manager",title:"\ud83d\udcbc Event Manager",description:"The EventManager is the object that holds together the nyx event system.",source:"@site/docs/features/events/event-manager.mdx",sourceDirName:"features/events",slug:"/features/events/event-manager",permalink:"/nyx/docs/features/events/event-manager",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/features/events/event-manager.mdx",tags:[],version:"current",frontMatter:{title:"\ud83d\udcbc Event Manager"},sidebar:"nyxSidebar",previous:{title:"\ufe0f\ud83d\udee1\ufe0f Event Interception",permalink:"/nyx/docs/features/events/event-interception"},next:{title:"\ud83d\udce3 Event Buses",permalink:"/nyx/docs/features/events/event-bus"}},a={},l=[{value:"\ud83d\udc77 Creation",id:"-creation",level:2},{value:"\ud83d\udc42 Client event bus",id:"-client-event-bus",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"EventManager"})," is the object that holds together the nyx event system."]}),"\n",(0,s.jsx)(n.p,{children:"It consists of:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"EventBus"})," collection for storing buses, mapped by their IDs."]}),"\n",(0,s.jsxs)(n.li,{children:["An ",(0,s.jsx)(n.code,{children:"EventBus"})," for Bot events."]}),"\n",(0,s.jsxs)(n.li,{children:["An ",(0,s.jsx)(n.code,{children:"EventBus"})," for Client events."]}),"\n",(0,s.jsxs)(n.li,{children:["An ",(0,s.jsx)(n.code,{children:"EventBus"})," for Manager events."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"As well as methods to interact with them."}),"\n",(0,s.jsx)(n.h2,{id:"-creation",children:"\ud83d\udc77 Creation"}),"\n",(0,s.jsx)(n.p,{children:"You can create a custom event manager by either:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Extending ",(0,s.jsx)(n.code,{children:"DefaultEventManager"})," from ",(0,s.jsx)(n.code,{children:"@nyx-discord/framework"})," (recommended)."]}),"\n",(0,s.jsxs)(n.li,{children:["Implementing ",(0,s.jsx)(n.code,{children:"EventManager"})," from ",(0,s.jsx)(n.code,{children:"@nyx-discord/core"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Then you can pass it to your bot:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"class MyEventManager extends DefaultEventManager {\n  // highlight-next-line\n  public myCustomPublicMethod() {}\n}\n\nconst myBot = Bot.create((bot: NyxBot) => ({\n  // ...\n\n  // highlight-next-line\n  events: new MyEventManager(/** ... */),\n}));\n\n// highlight-next-line\nmyBot.getEventManager().myCustomPublicMethod() // Works!\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Bot"})," class is able to infer the type of your custom manager via generics, so accessing any custom public method or\nproperty will work without errors."]}),"\n",(0,s.jsx)(n.h2,{id:"-client-event-bus",children:"\ud83d\udc42 Client event bus"}),"\n",(0,s.jsxs)(n.p,{children:["The manager holds a ",(0,s.jsx)(n.code,{children:"EventBus"})," that wraps the Discord.js ",(0,s.jsx)(n.code,{children:"Client"}),", for client events. You can get it with\n",(0,s.jsx)(n.code,{children:"EventManager#getClientBus()"}),", and you can directly subscribe to it with ",(0,s.jsx)(n.code,{children:"EventManager#subscribeClient()"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["You can use the utility abstraction on ",(0,s.jsx)(n.code,{children:"@nyx-discord/framework"})," for a subscriber for a Client,\nthe ",(0,s.jsx)(n.code,{children:"AbstractDJSClientSubscriber"}),". It receives a generic which is the handled event, where you can use the\ndiscord.js ",(0,s.jsx)(n.code,{children:"Event"})," enum. Said value will be used to safely type the arguments of the event handler."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Events } from 'discord.js';\nimport { AbstractDJSClientSubscriber } from '@nyx-discord/framework';\n\nclass InteractionCreateSubscriber\n  extends AbstractDJSClientSubscriber<Events.InteractionCreate> {\n  protected override readonly event = Events.InteractionCreate;\n\n  public handleEvent(\n    meta: EventDispatchMeta,\n    interaction: Interaction,\n  ): void {\n    // Since the built-in client event bus has a bot, this will never throw an error.\n    const bot = meta.getBot(true);\n\n    bot.logger.info(`Interaction ${interaction.id} received.`);\n  }\n}\n\nconst subscriber = new InteractionCreateSubscriber();\nawait bot.getEventManager().subscribeClient(subscriber);\n\n// same as:\nconst bus = bot.getEventManager().getClientBus();\nawait bus.subscribe(subscriber);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},6436:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>c});var s=t(2983);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);