/*
 * MIT License
 *
 * Copyright (c) 2024 Amgelo563
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import { Collection } from '@discordjs/collection';

import type { NyxBot } from '../../../../bot/NyxBot.js';
import { AssertionError } from '../../../../errors/AssertionError';
import type { Identifiable } from '../../../../identity/Identifiable.js';
import type { Identifier } from '../../../../identity/Identifier.js';
import type { MetaCollection } from '../../../../meta/MetaCollection.js';
import type { AnyEventBus } from '../../bus/AnyEventBus';
import type { EventBus } from '../../bus/EventBus.js';

/** An object that saves metadata about an event dispatch. */
export class EventDispatchMeta
  extends Collection<Identifier, unknown>
  implements MetaCollection, Identifiable
{
  protected readonly bot: NyxBot | null;

  protected readonly bus: EventBus<Record<string | number | symbol, unknown[]>>;

  protected readonly id: symbol;

  protected readonly createdAt: number = Date.now();

  protected handled = false;

  constructor(bot: NyxBot | null, bus: AnyEventBus, id: symbol) {
    super();
    this.bot = bot;
    this.bus = bus;
    this.id = id;
  }

  /** Creates an EventDispatchMeta using the given arguments, and an autogenerated ID. */
  public static fromEventName(
    bot: NyxBot | null,
    bus: AnyEventBus,
    event: string,
  ): EventDispatchMeta {
    return new EventDispatchMeta(
      bot,
      bus,
      Symbol(`Event:${event} @${Date.now()}`),
    );
  }

  /**
   * Returns the bot instance from where this event was dispatched.
   *
   * Use `force` to throw an error if the event was not dispatched from a bot.
   */
  public getBot(force?: false): NyxBot | null;
  public getBot(force: true): NyxBot;
  public getBot(force?: boolean): NyxBot | null {
    const bot = this.bot;
    if (!bot && force) {
      throw new AssertionError('This event was not dispatched from a bot.');
    }
    return bot;
  }

  /** Returns the ID of this event dispatch. */
  public getId(): Identifier {
    return this.id;
  }

  /** Returns the EventBus that dispatched this event. */
  public getBus(): AnyEventBus {
    return this.bus;
  }

  /**
   * Marks this event as handled, making subscribers
   * that return `true` on {@link EventSubscriber#ignoresHandledEvents} not
   * receive it.
   *
   * Once an event is marked as handled, it can't be marked "back" to
   * unhandled.
   */
  public setHandled(): void {
    this.handled = true;
  }

  /** Returns whether this event has been handled. */
  public isHandled(): boolean {
    return this.handled;
  }

  /** Returns the timestamp when this event was dispatched. */
  public getCreatedAt(): number {
    return this.createdAt;
  }
}
